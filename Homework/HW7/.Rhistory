View(X)
# data summaries
n = ncol(Y)
n_swimmers = nrow(Y)
g = n
W = seq(2,12,length.out=n)
X = cbind(rep(1,n),(W-mean(W)))
View(X)
p <- ncol(X)
matrix(c(23,0), ncol=1)
# Hyperparameters for the prior
nu_0 = 1
sigma_0_sq = 1/10
beta_0 = 0
Sigma_0 = g*sigma_0_sq*solve((t(W)%*%W))
View(Sigma_0)
solve((t(W)%*%W))
(t(W)%*%W)
solve((t(X)%*%X))
Sigma_0 = g*sigma_0_sq*solve((t(X)%*%X))
View(Sigma_0)
View(X)
View(X)
matrix(c(1,14-mean(W)),ncol=1)
SIGMA_SQ = 1/rgamma(1,nu_0/2,nu_0*sigma_0_sq/2)
library(mvtnorm)
BETA = rmvnorm(1, beta_0, Sigma_0)
beta_0 = c(0,0)
BETA = rmvnorm(1, beta_0, Sigma_0)
View(BETA)
prior_predict = matrix(0, nrow=n_iter, ncol=nrow(X))
# prior predictive distribution
n_iter = 1000
prior_predict = matrix(0, nrow=n_iter, ncol=nrow(X))
View(prior_predict)
X[1,]
t(X[1,])
for (j in 1:n){
prior_predict[,j] = rnorm(n_iter, BETA%*%X[j,], SIGMA_SQ) # save different weeks
}
View(prior_predict)
colnames(prior_predict) = c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12')
View(prior_predict)
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(21.5,25),ylim=c(0,3.5),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topleft",2,c('Week 2','Week 4','Week 6','Week 8'),col=c("red3","blue3","orange2","black"),lwd=2,bty="n")
lines(density(post_pred[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8 "]),lwd=1.5)
plot(density(prior_predict[,'Week 2']),col="red3",lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topleft",2,c('Week 2','Week 4','Week 6','Week 8'),col=c("red3","blue3","orange2","black"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8 "]),lwd=1.5)
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-2,5),ylim=c(0,15),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topleft",2,c('Week 2','Week 4','Week 6','Week 8'),col=c("red3","blue3","orange2","black"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8 "]),lwd=1.5)
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-1,1),ylim=c(0,13),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topleft",2,c('Week 2','Week 4','Week 6','Week 8'),col=c("red3","blue3","orange2","black"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
View(prior_predict)
lines(density(prior_predict[,"Week 8"]),lwd=1.5)
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-1,1),ylim=c(0,13),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topleft",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-0.7,0.5),ylim=c(0,13),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topleft",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
lines(density(prior_predict[,"Week 12"]),col="purple",lwd=1.5)
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-0.7,0.4),ylim=c(0,13),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topright",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
lines(density(prior_predict[,"Week 12"]),col="purple",lwd=1.5)
Y <- t(Y)
# Initial values for Gibbs samplers
beta = matrix(rmvnorm(1, beta_0, Sigma_0),nrow=p,ncol=n_swimmers)
# Set null matrices to save samples
BETA <- array(0,c(n_swimmers,n_iter,p))
SIGMA_SQ <- matrix(0,n_swimmers,n_iter)
#first set number of iterations and burn-in, then set seed
n_iter <- 10000; burn_in <- 0.3*n_iter
set.seed(1234)
for(s in 1:(n_iter+burn_in)){
for(j in 1:n_swimmers){
#update the sigma_sq
nu_n <- nu_0 + n
SSR <- t(Y[,j] - X%*%beta[,j])%*%(Y[,j] - X%*%beta[,j])
nu_n_sigma_n_sq <- nu_0*sigma_0_sq + SSR
sigma_sq[j] <- 1/rgamma(1,(nu_n/2),(nu_n_sigma_n_sq/2))
#update beta
Sigma_n <- solve(solve(Sigma_0) + (t(X)%*%X)/sigma_sq[j])
mu_n <- Sigma_n %*% (solve(Sigma_0)%*%beta_0 + (t(X)%*%Y[,j])/sigma_sq[j])
beta[,j] <- rmvnorm(1,mu_n,Sigma_n)
#save results only past burn-in
if(s > burn_in){
BETA[j,(s-burn_in),] <- beta[,j]
SIGMA_SQ[j,(s-burn_in)] <- sigma_sq[j]
}
}
}
# Initial values for Gibbs samplers
beta = matrix(rmvnorm(1, beta_0, Sigma_0),nrow=p,ncol=n_swimmers)
sigma_sq = rep(1,n_swimmers)
# Set null matrices to save samples
BETA <- array(0,c(n_swimmers,n_iter,p))
SIGMA_SQ <- matrix(0,n_swimmers,n_iter)
#first set number of iterations and burn-in, then set seed
n_iter <- 10000; burn_in <- 0.3*n_iter
set.seed(1234)
for(s in 1:(n_iter+burn_in)){
for(j in 1:n_swimmers){
#update the sigma_sq
nu_n <- nu_0 + n
SSR <- t(Y[,j] - X%*%beta[,j])%*%(Y[,j] - X%*%beta[,j])
nu_n_sigma_n_sq <- nu_0*sigma_0_sq + SSR
sigma_sq[j] <- 1/rgamma(1,(nu_n/2),(nu_n_sigma_n_sq/2))
#update beta
Sigma_n <- solve(solve(Sigma_0) + (t(X)%*%X)/sigma_sq[j])
mu_n <- Sigma_n %*% (solve(Sigma_0)%*%beta_0 + (t(X)%*%Y[,j])/sigma_sq[j])
beta[,j] <- rmvnorm(1,mu_n,Sigma_n)
#save results only past burn-in
if(s > burn_in){
BETA[j,(s-burn_in),] <- beta[,j]
SIGMA_SQ[j,(s-burn_in)] <- sigma_sq[j]
}
}
}
# posterior inference
beta_postmean = t(apply(BETA),c(1,3),mean))
# posterior inference
beta_postmean = t(apply(BETA,c(1,3),mean))
View(beta_postmean)
colnames(beta_postmean) = c("Swimmer 1", "Swimmer 2", "Swimmer 3", "Swimmer 4")
rownames(beta_ols) <- c("beta_0","beta_1")
beta_ols
rownames(beta_postmean) <- c("beta_0","beta_1")
beta_postmean
# Initial values for Gibbs samplers
beta = matrix(c(23,0),nrow=p,ncol=n_swimmers)
sigma_sq = rep(1,n_swimmers)
# Set null matrices to save samples
BETA <- array(0,c(n_swimmers,n_iter,p))
SIGMA_SQ <- matrix(0,n_swimmers,n_iter)
#first set number of iterations and burn-in, then set seed
n_iter <- 10000; burn_in <- 0.3*n_iter
set.seed(1234)
for(s in 1:(n_iter+burn_in)){
for(j in 1:n_swimmers){
#update the sigma_sq
nu_n <- nu_0 + n
SSR <- t(Y[,j] - X%*%beta[,j])%*%(Y[,j] - X%*%beta[,j])
nu_n_sigma_n_sq <- nu_0*sigma_0_sq + SSR
sigma_sq[j] <- 1/rgamma(1,(nu_n/2),(nu_n_sigma_n_sq/2))
#update beta
Sigma_n <- solve(solve(Sigma_0) + (t(X)%*%X)/sigma_sq[j])
mu_n <- Sigma_n %*% (solve(Sigma_0)%*%beta_0 + (t(X)%*%Y[,j])/sigma_sq[j])
beta[,j] <- rmvnorm(1,mu_n,Sigma_n)
#save results only past burn-in
if(s > burn_in){
BETA[j,(s-burn_in),] <- beta[,j]
SIGMA_SQ[j,(s-burn_in)] <- sigma_sq[j]
}
}
}
# posterior inference
beta_postmean = t(apply(BETA,c(1,3),mean))
View(beta_postmean)
colnames(beta_postmean) = c("Swimmer 1", "Swimmer 2", "Swimmer 3", "Swimmer 4")
rownames(beta_postmean) <- c("beta_0","beta_1")
beta_postmean
Y <- read.table("http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/swim.dat")
Y <- t(Y)
# data summaries
n = nrow(Y)
n_swimmers = ncol(Y)
g = n
W = seq(2,12,length.out=n)
X = cbind(rep(1,n),(W-mean(W)))
p = ncol(X)
# Hyperparameters for the prior
nu_0 = 1
sigma_0_sq = 1/10
beta_0 = c(0,0)
Sigma_0 = g*sigma_0_sq*solve((t(X)%*%X))
# Prior predictive distribution
SIGMA_SQ = 1/rgamma(1,nu_0/2,nu_0*sigma_0_sq/2)
BETA = rmvnorm(1, beta_0, Sigma_0)
n_iter = 1000
prior_predict = matrix(0, nrow=n_iter, ncol=nrow(X))
for (j in 1:n){
prior_predict[,j] = rnorm(n_iter, BETA%*%X[j,], SIGMA_SQ) # save different weeks
}
colnames(prior_predict) = c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12')
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-0.7,0.4),ylim=c(0,13),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topright",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
lines(density(prior_predict[,"Week 12"]),col="purple",lwd=1.5)
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-0.7,0.7),ylim=c(0,7),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topright",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
lines(density(prior_predict[,"Week 12"]),col="purple",lwd=1.5)
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-0.7,0.7),ylim=c(0,6),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topright",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
lines(density(prior_predict[,"Week 12"]),col="purple",lwd=1.5)
#sample sigma_sq
nu_n <- nu_0 + n
Y <- read.table("http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/swim.dat")
Y <- t(Y)
# data summaries
n = nrow(Y)
n_swimmers = ncol(Y)
g = n
W = seq(2,12,length.out=n)
X = cbind(rep(1,n),(W-mean(W)))
p = ncol(X)
# Hyperparameters for the prior
nu_0 = 1
sigma_0_sq = 1/10
beta_0 = c(0,0)
Sigma_0 = g*sigma_0_sq*solve((t(X)%*%X))
# Prior predictive distribution
SIGMA_SQ = 1/rgamma(1,nu_0/2,nu_0*sigma_0_sq/2)
BETA = rmvnorm(1, beta_0, Sigma_0)
n_iter = 1000
prior_predict = matrix(0, nrow=n_iter, ncol=nrow(X))
for (j in 1:n){
prior_predict[,j] = rnorm(n_iter, BETA%*%X[j,], sqrt(SIGMA_SQ)) # save different weeks
}
colnames(prior_predict) = c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12')
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-0.7,0.7),ylim=c(0,6),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topright",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
lines(density(prior_predict[,"Week 12"]),col="purple",lwd=1.5)
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-1,0.7),ylim=c(0,1),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-2,2),ylim=c(0,1),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-3,2),ylim=c(0,1),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topright",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
lines(density(prior_predict[,"Week 12"]),col="purple",lwd=1.5)
Y <- read.table("http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/swim.dat")
Y <- t(Y)
# data summaries
n = nrow(Y)
n_swimmers = ncol(Y)
g = n
W = seq(2,12,length.out=n)
X = cbind(rep(1,n),(W-mean(W)))
p = ncol(X)
# Hyperparameters for the prior
nu_0 = 1
sigma_0_sq = 1/10
beta_0 = c(0,0)
Sigma_0 = g*sigma_0_sq*solve((t(X)%*%X))
# Prior predictive distribution
SIGMA_SQ = 1/rgamma(1,nu_0/2,nu_0*sigma_0_sq/2)
BETA = rmvnorm(1, beta_0, Sigma_0)
n_iter = 1000
prior_predict = matrix(0, nrow=n_iter, ncol=nrow(X))
for (j in 1:n){
prior_predict[,j] = rnorm(n_iter, BETA%*%X[j,], sqrt(SIGMA_SQ)) # save different weeks
}
colnames(prior_predict) = c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12')
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-3,2),ylim=c(0,1),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topright",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
lines(density(prior_predict[,"Week 12"]),col="purple",lwd=1.5)
# set number of iterations
S <- 10000
plot(density(prior_predict[,'Week 2']),col="red3",xlim=c(-3,3),ylim=c(0,1),lwd=1.5,
main="Prior Predictive Distributions",xlab="swimming times")
legend("topright",2,c('Week 2','Week 4','Week 6','Week 8','Week 10','Week 12'),col=c("red3","blue3","orange2","black","green","purple"),lwd=2,bty="n")
lines(density(prior_predict[,"Week 4"]),col="blue3",lwd=1.5)
lines(density(prior_predict[,"Week 6"]),col="orange2",lwd=1.5)
lines(density(prior_predict[,"Week 8"]),col="black",lwd=1.5)
lines(density(prior_predict[,"Week 10"]),col="green",lwd=1.5)
lines(density(prior_predict[,"Week 12"]),col="purple",lwd=1.5)
# set number of iterations
S <- 10000
View(X)
# Hyperparameters for the prior
beta_ols <- solve(t(X)%*%X)%*%t(X)%*%Y
View(beta_ols)
View(Y)
View(prior_predict)
# Hyperparameters for the prior
beta_ols <- solve(t(X)%*%X)%*%t(X)%*%Y
# set number of iterations
S <- 10000
BETA = array(0,c(n_swimmers, S, p))
SIGMA_SQ = matrix(0,n_swimmers,S)
for (j in 1:n_swimmers){
# sample sigma_sq
nu_n <- nu_0 + n
Hg <- (g/(g+1))* X%*%solve(t(X)%*%X)%*%t(X)
SSRg <- t(Y[,j])%*%(diag(1,nrow=n) - Hg)%*%Y[,j]
nu_n_sigma_n_sq <- nu_0*sigma_0_sq + SSRg
sigma_sq <- 1/rgamma(S,(nu_n/2),(nu_n_sigma_n_sq/2))
# sample beta
mu_n <- g*beta_ols[,j]/(g+1)
beta <- matrix(nrow=S,ncol=p)
for(s in 1:S){
Sigma_n <- g*sigma_sq[s]*solve(t(X)%*%X)/(g+1)
beta[s,] <- rmvnorm(1,mu_n,Sigma_n)
}
BETA[j,] = beta
SIGMA_SQ[j,] = sigma_sq
}
BETA = array(0,c(n_swimmers, S, p))
SIGMA_SQ = matrix(0,n_swimmers,S)
for (j in 1:n_swimmers){
# sample sigma_sq
nu_n <- nu_0 + n
Hg <- (g/(g+1))* X%*%solve(t(X)%*%X)%*%t(X)
SSRg <- t(Y[,j])%*%(diag(1,nrow=n) - Hg)%*%Y[,j]
nu_n_sigma_n_sq <- nu_0*sigma_0_sq + SSRg
sigma_sq <- 1/rgamma(S,(nu_n/2),(nu_n_sigma_n_sq/2))
# sample beta
mu_n <- g*beta_ols[,j]/(g+1)
beta <- matrix(nrow=S,ncol=p)
for(s in 1:S){
Sigma_n <- g*sigma_sq[s]*solve(t(X)%*%X)/(g+1)
beta[s,] <- rmvnorm(1,mu_n,Sigma_n)
}
BETA[j,,] = beta
SIGMA_SQ[j,] = sigma_sq
}
dim(BETA)
BETA[1,]
BETA[1,,]
SIGMA_SQ[1,]
# posterior summaries
beta_postmean <- t(apply(BETA,c(1,3),mean))
View(beta_postmean)
colnames(beta_postmean) <- c("Swimmer 1","Swimmer 2","Swimmer 3","Swimmer 4")
rownames(beta_postmean) <- c("beta_0","beta_1")
beta_postmean
View(Y)
View(beta_ols)
n_swimmers
View(Y)
beta_old[,1]
beta_ols[,1]
# (c) For each swimmer j, plot their posterior predictive distributions for a future time T* two weeks after the last recorded observations
x_new <- matrix(c(1,(14-mean(W))),ncol=1)
post_pred <- matrix(0,nrow=n_iter,ncol=n_swimmers)
for(j in 1:n_swimmers){
post_pred[,j] <- rnorm(n_iter,BETA[j,,]%*%x_new,sqrt(SIGMA_SQ[j,]))
}
colnames(post_pred) <- c("Swimmer 1","Swimmer 2","Swimmer 3","Swimmer 4")
plot(density(post_pred[,"Swimmer 1"]),col="red3",xlim=c(21.5,25),ylim=c(0,3.5),lwd=1.5,
main="Predictive Distributions",xlab="swimming times")
legend("topleft",2,c("Swimmer1","Swimmer2","Swimmer3","Swimmer4"),col=c("red3","blue3","orange2","black"),lwd=2,bty="n")
lines(density(post_pred[,"Swimmer 2"]),col="blue3",lwd=1.5)
lines(density(post_pred[,"Swimmer 3"]),col="orange2",lwd=1.5)
lines(density(post_pred[,"Swimmer 4"]),lwd=1.5)
plot(density(post_pred[,"Swimmer 1"]),col="red3",xlim=c(0,25),ylim=c(0,3.5),lwd=1.5,
main="Predictive Distributions",xlab="swimming times")
plot(density(post_pred[,"Swimmer 1"]),col="red3",xlim=c(0,50),ylim=c(0,3.5),lwd=1.5,
main="Predictive Distributions",xlab="swimming times")
plot(density(post_pred[,"Swimmer 1"]),col="red3",xlim=c(0,50),ylim=c(0,1),lwd=1.5,
main="Predictive Distributions",xlab="swimming times")
plot(density(post_pred[,"Swimmer 1"]),col="red3",xlim=c(0,30),ylim=c(0,1),lwd=1.5,
main="Predictive Distributions",xlab="swimming times")
plot(density(post_pred[,"Swimmer 1"]),col="red3",xlim=c(0,30),ylim=c(0,0.5),lwd=1.5,
main="Predictive Distributions",xlab="swimming times")
legend("topleft",2,c("Swimmer1","Swimmer2","Swimmer3","Swimmer4"),col=c("red3","blue3","orange2","black"),lwd=2,bty="n")
lines(density(post_pred[,"Swimmer 2"]),col="blue3",lwd=1.5)
lines(density(post_pred[,"Swimmer 3"]),col="orange2",lwd=1.5)
lines(density(post_pred[,"Swimmer 4"]),lwd=1.5)
setwd("C:/Users/Echo Liu/Downloads/Duke_University/4th-semester/STA602_Bayesian/Homework/HW7")
## Question 2:
# a) Fit a regression model using the g-prior with g=n, nu_0=2, sigma_sq_0=1
# obtain posterior confidence intervals for all of the parameters
az = read.table("azdiabetes.dat", header = TRUE)
## Question 2:
# a) Fit a regression model using the g-prior with g=n, nu_0=2, sigma_sq_0=1
# obtain posterior confidence intervals for all of the parameters
az = read.table("azdiabetes.dat.txt", header = TRUE)
View(az)
az = read.table("azdiabetes.dat.txt", header = TRUE)[,-8]
# glu ~ 1 + npreg + bp + skin + bmi + ped + age
### data and priors
n = nrow(az)
intercept = as.matrix(rep(1, n), ncol = 1)
colnames(intercept) = c("intercept")
rownames(intercept) = 1:nrow(az)
View(intercept)
X = cbind(intercept, as.matrix(az[, -2]))
View(X)
y = as.matrix(az[, 2], ncol = 1)
View(y)
View(az)
1:nrow(az)
as.matrix(az[, -2])
p = ncol(X)
nu0 = 2
g = n
S = 10000
nu0 = 2
s20 = 1
X = cbind(intercept, as.matrix(az[, -2])) #delete glu col
Y = as.matrix(az[, 2], ncol = 1)
p = ncol(X)
nu_0 = 2
sigma_0_sq = 1
g = n
S = 10000
#sample sigma_sq
nu_n <- nu_0 + n
Hg <- (g/(g+1))* X%*%solve(t(X)%*%X)%*%t(X)
SSRg <- t(Y)%*%(diag(1,nrow=n) - Hg)%*%Y
nu_n_sigma_n_sq <- nu_0*sigma_0_sq + SSRg
sigma_sq <- 1/rgamma(S,(nu_n/2),(nu_n_sigma_n_sq/2))
# Hyperparameters for the prior
beta_ols = solve(t(X)%*%X)%*%t(X)%*%Y
# MC sampling
S = 10000
#sample beta
mu_n <- g*beta_ols/(g+1)
beta <- matrix(nrow=S,ncol=p)
for(s in 1:S){
Sigma_n <- g*sigma_sq[s]*solve(t(X)%*%X)/(g+1)
beta[s,] <- rmvnorm(1,mu_n,Sigma_n)
}
#posterior summaries
colnames(beta) <- colnames(X)
mean_beta <- apply(beta,2,mean)
mean_beta
round(mean_beta,4)
round(apply(beta,2,function(x) quantile(x,c(0.025,0.975))),4)
apply(sigma_sq, 2, quantile, c(0.025, 0.975))
apply(sigma_sq, 1, quantile, c(0.025, 0.975))
apply(sigma_sq, 2, function(x) quantile(x,c(0.025,0.975)))
dim(sigma_sq)
colnames(sigma_sq) <- 'sigma^2'
sigma_sq
colnames(sigma_sq) <- 'sigma^2'
sigma_sq_mx <- as.matrix(sigma_sq,nrow=S)
View(sigma_sq_mx)
colnames(sigma_sq) <- 'sigma^2'
colnames(sigma_sq_mx) <- 'sigma^2'
apply(sigma_sq_mx, 2, function(x) quantile(x,c(0.025,0.975)))
library(BAS)
library(BMA)
View(az)
######## Bayesian Model Selection and Averaging
Data_bas <- bas.lm(glu~npreg+bp+skin+bmi+ped+age, data=az, prior="g-prior",alpha=n,
n.models=2^p, update=50, initprobs="Uniform")
plot(Data_bas,which=4)
image(Data_bas)
coef(Data_bas)
par(mfrow=c(3,3))
plot(coef(Data_bas), subset=2:8,ask=T)
par(mfrow=c(2,3))
plot(coef(Data_bas), subset=2:8,ask=T)
par(mfrow=c(2,2))
plot(coef(Data_bas), subset=2:8,ask=T)
summary(Data_bas)
coef(Data_bas)
?plot
plot(coef(Data_bas), subset=2:7,ask=T)
par(mfrow=c(2,2))
plot(coef(Data_bas), subset=2:7,ask=T)
coef(Data_bas)
confint(Data_bas)
confint(coef(Data_bas))
