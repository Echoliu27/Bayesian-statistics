x = "City fuel efficiency (miles per gallon)",
y = "Highway fuel Efficiency (miles per gallon)",
color = "Class")
p + dark_theme_gray()
p <- ggplot(mpg) +
geom_boxplot(aes(trans, hwy)) +
coord_flip() +
guides(color = guide_legend(reverse = TRUE)) +
labs(title = "Highway fuel efficiency by City fuel efficiency and Type of car",
x = "City fuel efficiency (miles per gallon)",
y = "Highway fuel Efficiency (miles per gallon)",
color = "Class")
p + dark_theme_gray()
p <- ggplot(mpg) +
geom_boxplot(aes(trans, hwy, color = trans)) +
coord_flip() +
guides(color = guide_legend(reverse = TRUE)) +
labs(title = "Highway fuel efficiency by City fuel efficiency and Type of car",
x = "City fuel efficiency (miles per gallon)",
y = "Highway fuel Efficiency (miles per gallon)",
color = "Class")
p + dark_theme_gray()
p <- ggplot(mpg) +
geom_boxplot(aes(trans, hwy, color = trans)) +
coord_flip() +
guides(color = guide_legend(reverse = TRUE)) +
labs(title = "Highway fuel efficiency by type of transmission",
x = "Type of transmission",
y = "Highway fuel Efficiency (miles per gallon)")
p + dark_theme_gray()
Skid_steer <- read.csv("C:/Users/Echo Liu/Downloads/Duke_University/3rd-semester/Capstone/Viz/Skid_steer_color_added.csv", stringsAsFactors=FALSE)
summary(Skid_steer)
Skid_steer1 <- na.omit(Skid_steer) #Onlt 5358 data (1990 + 430 + 637, some overlaps, but that's enough)
std_norm_cdf <- pnorm(-2) # What is the value of the CDF function of a N(0,1) R.V. at -2?
std_norm_dens <- dnorm(0.5) # What is the value of the PDF function of a N(0,1) R.V. at 0.5?
# Question 4
## 2)
theta <- seq(from=0, to=1, by=0.1)
dens <-  theta^57*(1-theta)^(100-57)
plot(theta, dens, ylim=c(0,1.1*max(dens)),
type="l", xlab="theta", ylab="sampling distribution", xaxs="i",
yaxs="i", yaxt="n", bty="n", cex=2)
# Question 4
## 2)
Y = 57
N = 100
dens <-  theta^Y*(1-theta)^(N-Y)
plot(theta, dens, xlab="theta", ylab="sampling distribution")
hist(theta, dens, xlab="theta", ylab="sampling distribution")
boxplot(theta, dens, xlab="theta", ylab="sampling distribution")
hist(x = theta, y = dens, xlab="theta", ylab="sampling distribution")
plot(x = theta, y = dens, xlab="theta", ylab="sampling distribution")
plot(x = theta, y = dens, type='l',xlab="theta", ylab="sampling distribution")
df <- data.frame(theta, dens)
ggplot(df, aes(x = theta, y = dens)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = theta.discrete)
library(ggplot)
library(tidyverse)
ggplot(df, aes(x = theta, y = dens)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = theta.discrete)
View(df)
View(df)
ggplot(df, aes(x = theta, y = dens)) +
geom_bar(stat = 'identity') +
)
library(plotly)
ggplot(df, aes(x = theta, y = dens)) +
geom_bar(stat = 'identity')
ggplot(df, aes(x = theta, y = dens)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = theta.discrete))
df <- data.frame(theta, round(dens,3))
View(df)
df <- data.frame(theta, dens,3)
ggplot(df, aes(x = theta, y = dens)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = theta)
df <- data.frame(theta, dens)
lines(theta,dens,type='l',col='blue')
plot(x = theta, y = dens, type='l',xlab="theta", ylab="sampling distribution")
posterior <- prior * theta
prior <- dbeta(x,1,1)
# c)
x <- seq(0, 1, length = 20)
prior <- dbeta(x,1,1)
posterior <- prior * theta
posterior <- prior * dens
prior <- dbeta(theta,1,1)
posterior <- prior * dens
#lines(theta,dens,type='l',col='blue')
#plot(x = theta, y = dens, type='l',xlab="theta", ylab="sampling distribution")
ggplot(df, aes(x = theta, y = dens)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = theta)
posterior <- prior * dens/sum(dens)
ggplot(df, aes(x = theta, y = posterior)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = theta)
dens <-  choose(N,Y) * theta^Y*(1-theta)^(N-Y)
choose(N,Y)
theta <- seq(from=0, to=1, by=0.1)
df <- data.frame(theta, dens)
#lines(theta,dens,type='l',col='blue')
#plot(x = theta, y = dens, type='l',xlab="theta", ylab="sampling distribution")
ggplot(df, aes(x = theta, y = dens)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = theta)
posterior <- prior * dens/sum(dens)
ggplot(df, aes(x = theta, y = posterior)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = theta)
# d)
theta.any <- seq(from=0, to=1, by=0.01)
posterior_wlcons <-  1*dens
plot(theta.any, posterior_wlcons, xlim=c(0,1))
posterior_wlcons <-  choose(N,Y) * theta.any^Y*(1-theta.any)^(N-Y)
plot(theta.any, posterior_wlcons, xlim=c(0,1))
plot(theta.any, type='l',posterior_wlcons, xlim=c(0,1))
# e)
posterior_beta <- dbeta(theta.any, 1+Y,1+N-Y)
plot(theta.any, type='l',posterior_beta, xlim=c(0,1))
#############################################################
## Question 5
N = 100
exp.posterior = function(w, theta0, y) {
(N / (w + N)) * (y / N) + (w / (w + N)) * theta0
}
Theta0 = rev(seq(0.0, 1, by = 0.1))
W = seq(0, 32, by = 0.5)
y = 57
d = outer(Theta0, W, FUN = function(theta0, w) exp.posterior(w, theta0, 57))
View(d)
rownames(d) = Theta0
colnames(d) = W
View(d)
df = melt(d)
View(df)
library(reshape2)
df = melt(d)
View(df)
colnames(df) = c('theta0', 'w', 'theta')
p = ggplot(df, aes(x = w, y = theta0, z = theta)) +
geom_contour(aes(colour = ..level..)) +
scale_x_continuous(breaks = c(1, 2, 8, 16, 32), labels = c(1, 2, 8, 16, 32)) +
scale_y_continuous(breaks = Theta0)
library(directlabels)
direct.label(p, method = 'bottom.pieces')
install.packages('directlabels')
library(directlabels)
direct.label(p, method = 'bottom.pieces')
View(d)
N = 58      # population size. to be filled in.
zeros = 44  #number that did not watch it in whole class. to be filled in.
ones =  14  # number that did watch in whole class. to be filled in.
#simple random sample information
n = 20  #sample size
#we will give everyone in class an ID number, and randomly sample 20 of those numbers
sample(1:N, 20, replace = F)
#then we collect data for all the people whose ID numbers are called.
samplewatchgamedata = c()  #vector of 20 zeros and ones representing answers. to be filled in during class
library(survey)
#first make the weights.  we will pass these to the survey package
weights = rep(N/n, n)
#we have to tell the survey package the population size so it can compute the finite population correction.
#let's make a variable for the population size
popsize = rep(N, n)
#make the data frame with all the data
classdata2020 = cbind(watchedgame = samplewatchgamedata, wts = weights, fpc = popsize)
classdata2020 = data.frame(classdata2020)
#add these to the dataset
classdessrs = svydesign(~1, weights=~wts, fpc =~fpc, data = classdata2020)
# I only need to do the truncated value
theta <- seq(from=0, to=1, by=0.0001)
prior <- dunif(theta, 0, 0.1)
seq2 <- c()
for (N in 0:1000){
dens <-  choose(N,0) * theta^0 *(1-theta)^(N-0) # sum of Y as sufficient statistics is a binomial distribution
posterior <- prior * dens/sum(dens)
seq2 <- c(seq2, posterior)
}
seq2
dens <-  choose(100,0) * theta^0 *(1-theta)^(100-0) # sum of Y as sufficient statistics is a binomial distribution
posterior <- prior * dens/sum(dens)
posterior
# I only need to do the truncated value
theta <- seq(from=0, to=1, by=0.0001)
prior <- dunif(theta, 0, 0.1)
seq2 <- c()
for (N in 0:1000){
dens <-  choose(100,0) * 0.0015^0 *(1-0.0015)^(100-0) # sum of Y as sufficient statistics is a binomial distribution
posterior <- prior * dens/sum(dens)
seq2 <- c(seq2, posterior)
}
dens <-  choose(100,0) * 0.0015^0 *(1-0.0015)^(100-0) # sum of Y as sufficient statistics is a binomial distribution
sum(dens)
for (N in 0:1000){
dens <-  choose(N,0) * 0.0015^0 *(1-0.0015)^(N-0) # sum of Y as sufficient statistics is a binomial distribution
seq2 <- c(seq2, dens)
}
seq2 <- c()
for (N in 0:1000){
dens <-  choose(N,0) * 0.0015^0 *(1-0.0015)^(N-0) # sum of Y as sufficient statistics is a binomial distribution
seq2 <- c(seq2, dens)
}
seq2
seq2 <- c()
for (i in 100:3000){
cdf <- pbeta(0.0015*10, shape1 = 1,shape2 = 1+i)
seq2 <- c(seq1, cdf)
}
n <- Position(function(x) x > 0.95, seq2)
seq2 <- c()
for (i in 100:3000){
cdf <- pbeta(0.0015*10, shape1 = 1,shape2 = 1+i)
seq2 <- c(seq2, cdf)
}
n <- Position(function(x) x > 0.95, seq2)
sample5 <- n+100
sample1, sample2
sample1
sample5
sample5,sample5
print(sample5)
print(sample5,sample5)
seq2 <- c()
for (i in 100:3000){
cdf <- pbeta(0.0015, shape1 = 1,shape2 = 1+i)/pbeta(0.1, shape1 = 1, shape2 = 1+i)
seq2 <- c(seq2, cdf)
}
n <- Position(function(x) x > 0.95, seq2)
sample5 <- n+100 #199
######################################################
Theta0 = rev(seq(0, 1, by = 0.1))
N0 = seq(0, 32, by = 0.5)
a = Theta0 * N0
######################################################
Theta0 = rev(seq(0, 1, by = 0.1))
N0 = seq(0, 32, by = 0.5)
a_formula <- function(n0, theta0){
no * theta0
}
outer(Theta0, N0, function(n0, theta0) a_formula(n0, theta0))
a_formula <- function(n0, theta0){
n0 * theta0
}
outer(Theta0, N0, function(n0, theta0) a_formula(n0, theta0))
da <- outer(Theta0, N0, function(n0, theta0) a_formula(n0, theta0))
rownames(da) = Theta0
colnames(da) = N0
df_a = melt(da)
library(tidyverse)
library(plotly)
library(reshape2)
df_a = melt(da)
colnames(df_a) = c('theta0', 'n0', 'a')
View(df_a)
df_a['b'] <- df_a['n0']-df_z['a']
df_a['b'] <- df_a['n0']-df_a['a']
runif(1,0,1)
u <- runif(10,0,1)
u
fa <- pbeta(0.4, shape1=5, shape2 = 10)
fb <- pbeta(0.75, shape1=5, shape2 = 10)
u_trun <- (fb-fa)*u+fa
theta <- qbeta(u_trun, shape1=5, shape2 = 10)
theta
u <- runif(1000,0,1)
fa <- pbeta(0.4, shape1=5, shape2 = 10)
fb <- pbeta(0.75, shape1=5, shape2 = 10)
u_trun <- (fb-fa)*u+fa
theta <- qbeta(u_trun, shape1=5, shape2 = 10)
head(theta)
tail(theta)
theta(c(:10))
theta[[:10]]
theta[[10]]
theta[[20,21,22,23]]
theta[[20]]
theta(c(20,21,22,23,24))
sum(theta)
# mean of the random draw
theta_mean <- sum(theta)/1000
theta_mean
# variance of the random draw
theta_var <- (theta-theta_mean)^2/(1000-1)
theta_var
# variance of the random draw
theta_var <- sum((theta-theta_mean)^2)/(1000-1)
theta_var
#(b)
n_0 <- seq(1,50,by=1)
exp <- (12*n_0 + 113)/(n_0 + 14)
plot(n0,exp)
plot(n_0,exp)
exp <- (12*n_0 + 113)/(n_0 + 13)
plot(n_0,exp)
## Question 4
theta1.mc <- rbeta(5000,58,44)
theta2.mc <- rbeta(5000,31,21)
mean(theta1.mc<theta2.mc)
## Question 1
set.seed(123)
theta.mc10 <- rgamma(10, 68, 45)
theta.mc100 <- rgamma(100, 68, 45)
theta.mc1000 <- rgamma(1000, 68, 45)
hist(theta.mc10)
hist(theta.mc100)
mean(theta.mc1000)
hist(theta.mc1000)
hist(theta.mc10)
hist(theta.mc100)
hist(theta.mc1000)
plot(density(theta.mc10), xlab="Number of children", ylab="density", col="blue",lty=1,main="")
quantile(theta.mc10, c(0.025,0.975))
probs.mc10 <- quantile(theta.mc10, c(0.025,0.975))
probs.mc10 <- quantile(theta.mc10, c(0.025,0.975))
probs.mc100 <- quantile(theta.mc100, c(0.025,0.975))
probs.mc100 <- quantile(theta.mc100, c(0.025,0.975))
probs.mc1000 <- quantile(theta.mc1000, c(0.025,0.975))
plot(density(theta.mc10), xlab="Number of children", ylab="density", col="blue",lty=1,main="10 MC Samples")
abline(x = probs.mc10, col=c("red"), lty=c(2), lwd=c(1))
abline(v = probs.mc10, col=c("red"), lty=c(2), lwd=c(1))
legend(185,0.05, c("female","male"),lty=c(1,1),col=c("blue","red"))
legend(2, 1, legend=c("Density", "95% Quantile"),
col=c("blue", "red"), lty=1:2, cex=0.8)
legend(1.9, 1.2, legend=c("Density", "95% Quantile"),
col=c("blue", "red"), lty=1:2, cex=0.8)
plot(density(theta.mc10), xlab="Number of children", ylab="density", col="blue",lty=1,main="10 MC Samples")
abline(v = probs.mc10, col=c("red"), lty=2, lwd=c(1))
legend(1.9, 1.2, legend=c("Density", "95% Quantile"),
col=c("blue", "red"), lty=1:2, cex=0.8)
# mark those points
mean.mc10 <- mean(theta.mc10)
abline(v = mean.mc10, col="black", lty=3,lwd=1)
plot(density(theta.mc10), xlab="Number of children", ylab="density", col="black",lty=1,main="10 MC Samples")
abline(v = probs.mc10, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc10, col="blue", lty=3,lwd=1)
legend(1.9, 1.2, legend=c("Density", "95% Quantile", "mean"),
col=c("black", "red","blue"), lty=1:2, cex=0.8)
plot(density(theta.mc10), xlab="Number of children", ylab="density", col="black",lty=1,main="10 MC Samples")
abline(v = probs.mc10, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc10, col="blue", lty=3,lwd=1)
legend(1.9, 1.2, legend=c("Density", "95% Quantile", "mean"),
col=c("black", "red","blue"), lty=1:3, cex=0.8)
str(10)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main= str(samples)+ "MC Samples")
abline(v = probs.mc10, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc10, col="blue", lty=3,lwd=1)
legend(1.9, 1.2, legend=c("Density", "95% Quantile", "mean"),
col=c("black", "red","blue"), lty=1:3, cex=0.8)
}
sample_plot(10)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main="MC Samples")
abline(v = probs.mc, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc, col="blue", lty=3,lwd=1)
legend(1.9, 1.2, legend=c("Density", "95% Quantile", "mean"),
col=c("black", "red","blue"), lty=1:3, cex=0.8)
}
sample_plot(10)
sample_plot(100)
sample_plot(1000)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main=paste(samples, " MC Samples"))
abline(v = probs.mc, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc, col="blue", lty=3,lwd=1)
legend(1.9, 1.2, legend=c("Density", "95% Quantile", "mean"),
col=c("black", "red","blue"), lty=1:3, cex=0.8)
}
sample_plot(1000)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main=paste(samples, " MC Samples"))
abline(v = probs.mc, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc, col="blue", lty=3,lwd=1)
legend(1.9, 1.2, legend=c("Density", paste("95% Quantile: ", probs.mc[[1]], probs.mc[[2]]), paste("mean: ", round(mean.mc,2))),
col=c("black", "red","blue"), lty=1:3, cex=0.8)
}
sample_plot(1000)
sample_plot(10)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main=paste(samples, " MC Samples"))
abline(v = probs.mc, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc, col="blue", lty=3,lwd=1)
legend(1.9, 1.2, legend=c("Density", paste("95% Quantile: ", round(probs.mc[[1]],2), round(probs.mc[[2]],2)), paste("mean: ", round(mean.mc,2))),
col=c("black", "red","blue"), lty=1:3, cex=0.8)
}
sample_plot(10)
sample_plot(1000)
sample_plot(100)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main=paste(samples, " MC Samples"))
abline(v = probs.mc, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc, col="blue", lty=3,lwd=1)
legend(1.7, 1.4, legend=c("Density", paste("95% Quantile: ", round(probs.mc[[1]],2), round(probs.mc[[2]],2)), paste("mean: ", round(mean.mc,2))),
col=c("black", "red","blue"), lty=1:3, cex=0.8)
}
sample_plot(100)
sample_plot(100)
sample_plot(100)
sample_plot(10)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main=paste(samples, " MC Samples"))
abline(v = probs.mc, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc, col="blue", lty=3,lwd=1)
legend(1.7, 1.4, legend=c("Density", paste("95% Quantile: ", round(probs.mc[[1]],2), round(probs.mc[[2]],2)), paste("mean: ", round(mean.mc,2))),
col=c("black", "red","blue"), lty=1:3, cex=0.8, bg="transparent")
}
sample_plot(10)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main=paste(samples, " MC Samples"))
abline(v = probs.mc, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc, col="blue", lty=3,lwd=1)
legend(1.7, 1.4, legend=c("Density", paste("95% Quantile: ", round(probs.mc[[1]],2), round(probs.mc[[2]],2)), paste("mean: ", round(mean.mc,2))),
col=c("black", "red","blue"), lty=1:3, cex=0.8, bg="transparent", bty = "n")
}
sample_plot(10)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main=paste(samples, " MC Samples"))
abline(v = probs.mc, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc, col="blue", lty=3,lwd=1)
legend(1.8, 1.4, legend=c("Density", paste("95% Quantile: ", round(probs.mc[[1]],2), round(probs.mc[[2]],2)), paste("mean: ", round(mean.mc,2))),
col=c("black", "red","blue"), lty=1:3, cex=0.8, bg="transparent", bty = "n")
}
sample_plot(10)
sample_plot(100)
sample_plot(1000)
sample_plot <- function(samples){
set.seed(123)
theta.mc <- rgamma(samples, 68, 45)
mean.mc <- mean(theta.mc)
probs.mc <- quantile(theta.mc, c(0.025,0.975))
plot(density(theta.mc), xlab="Number of children", ylab="density", col="black",lty=1,main=paste(samples, " MC Samples"))
abline(v = probs.mc, col=c("red"), lty=2, lwd=c(1))
abline(v = mean.mc, col="blue", lty=3,lwd=1)
legend("topright", legend=c("Density", paste("95% Quantile: ", round(probs.mc[[1]],2), round(probs.mc[[2]],2)), paste("mean: ", round(mean.mc,2))),
col=c("black", "red","blue"), lty=1:3, cex=0.8, bg="transparent", bty = "n")
}
sample_plot(1000)
sample_plot(10)
sample_plot(100)
sample_plot(1000)
#(b)
mean(theta.mc10 < 1.5)
#(b) posterior probability theta2<1.5
mean(theta.mc10 < 1.5)
mean(theta.mc100 < 1.5)
mean(theta.mc1000 < 1.5)
# true mean and quantile-based CI
true_mean <- 68/45
true_quantile <- qgamma(c(0.025,0.975),68,45)
true_mean
true_quantile
library(tidyverse)
library(rstanarm)
library(magrittr)
library(rstan)
tumors <- read.csv(file = url("http://www.stat.columbia.edu/~gelman/book/data/rats.asc"),
skip = 2, header = T, sep = " ")[,c(1,2)]
y <- tumors$y
N <- tumors$N
n <- length(y)
plot(seq(0, 1, length.out = 1000),
dbeta(seq(0, 1, length.out = 1000), 1, 1),
type = 'l',
xlab = expression(theta), ylab = "Density",
main = "The Beta(1, 1) density")
stan_dat <- list(n = n, N = N, y =y, a = 1, b = 1)
fit_pool <- stan('lab-02-pool.stan', data = stan_dat, chains = 2, refresh = 0)
setwd("C:/Users/Echo Liu/Downloads/Duke_University/4th-semester/STA602_Bayesian/Lab/Lab2")
fit_pool <- stan('lab-02-pool.stan', data = stan_dat, chains = 2, refresh = 0)
pkgbuild::rtools_path()
fit_pool <- stan('lab-02-pool.stan', data = stan_dat, chains = 2, refresh = 0)
fit_pool <- stan('lab-02-pool.stan', data = stan_dat, chains = 2, refresh = 0)
