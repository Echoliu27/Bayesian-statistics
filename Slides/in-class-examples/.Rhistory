runif(3)
runif?
;
help(runif)
library(coda)
library(DirichletReg)
#First generate data
set.seed(1234)
Z_true <- sample(1:3,500,replace=T,prob=c(0.55,0.30,0.15))
mu_true <- c(-5,3,9)
Y <- matrix(rnorm(length(Z_true),mu_true[Z_true],2.5),ncol=1)
help(rnorm)
Y <- matrix(rnorm(length(Z_true),mu_true[Z_true],2.5),ncol=1)
plot(density(Y))
#Now fit model back to simulated data
K <- 3
n_iter <- 10000
burn_in <- 0.3*n_iter
thin <- 1
###Data summaries
n <- nrow(Y)
###Hyperparameters for the priors
mu_0 <- 0
gamma_0_sq <- 100
nu_0 <- 2
sigma_0_sq <- 100
alpha <- rep(1,K)
###Initialize
mu <- rep(0,K)
#mu <- seq(-3,3,length.out=K)*sd(Y) + mean(Y); mu <- mu[order(mu,decreasing=F)]
sigma_sq <- var(Y)
lambda <- rep(1/K,K)
post_prob_z <- matrix(0,n,K)
###Set null matrices to save samples
MU <- matrix(0,nrow=n_iter,ncol=K)
SIGMA_SQ <- matrix(nrow=n_iter, ncol=1)
Z_MAT <- matrix(0,nrow=n_iter,ncol=n)
LAMBDA <- matrix(0,nrow=n_iter,ncol=K)
#Update z_i, the mixture i.d. for each observation
for(k in 1:K){
post_prob_z[,k] <- lambda[k]*dnorm(Y,mu[k],sqrt(sigma_sq))
}
post_prob_z <- post_prob_z/matrix(rowSums(post_prob_z),nrow=n,ncol=K)
Ran_unif_z <- runif(nrow(post_prob_z))
ncol(post_prob_z)
diag(3)
upper.tri(diag(3))
upper.tri(diag(3),diag=TRUE)
cumul_z <- post_prob_z%*%upper.tri(diag(ncol(post_prob_z)),diag=TRUE)
Ran_unif_z>cumul_z
rowSums(Ran_unif_z>cumul_z)
1L
Z <- rowSums(Ran_unif_z>cumul_z) + 1L
factor(Z,levels=c(1:K))
#Update mu for each mixture component
n_k <- c(table(factor(Z,levels=c(1:K))))
n_
n_k
require(lattice)
library(pls)
library(calibrate)
library(BAS)
library(BMA)
library(mvtnorm)
###### Data
Data <- read.table("costs.txt",header=TRUE)[,-9]
View(Data)
###### Very basic EDA
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs((Data), panel=panel.smooth,diag.panel=panel.hist)
#Check correlation
levelplot(cor(Data))
###### g-Prior: with g=n using full model
#Data summaries
n <- 29
p <- 8
g <- n
X <- cbind(1,as.matrix(Data[,c("RXPM","GS","RI","COPAY","AGE","F","MM")]))
Y <- matrix(Data$COST,ncol=1)
#Hyperparameters for the priors
beta_ols <- solve(t(X)%*%X)%*%t(X)%*%Y
SSR_beta_ols <- (t(Y - (X%*%(solve(t(X)%*%X))%*%t(X)%*%Y)))%*%(Y - (X%*%(solve(t(X)%*%X))%*%t(X)%*%Y))
sigma_ols <- SSR_beta_ols/(n-p)
#sigma_0_sq <- sigma_ols
sigma_0_sq <- 1/100
nu_0 <- 1
#set number of iterations
S <- 10000
#sample sigma_sq
nu_n <- nu_0 + n
Hg <- (g/(g+1))* X%*%solve(t(X)%*%X)%*%t(X)
SSRg <- t(Y)%*%(diag(1,nrow=n) - Hg)%*%Y
nu_n_sigma_n_sq <- nu_0*sigma_0_sq + SSRg
sigma_sq <- 1/rgamma(S,(nu_n/2),(nu_n_sigma_n_sq/2))
#sample beta
mu_n <- g*beta_ols/(g+1)
beta <- matrix(nrow=S,ncol=p)
for(s in 1:S){
Sigma_n <- g*sigma_sq[s]*solve(t(X)%*%X)/(g+1)
beta[s,] <- rmvnorm(1,mu_n,Sigma_n)
}
#posterior summaries
colnames(beta) <- colnames(X)
mean_beta <- apply(beta,2,mean)
round(mean_beta,4)
round(apply(beta,2,function(x) quantile(x,c(0.025,0.975))),4)
######## Bayesian Model Selection and Averaging
#library(BAS)
Data_bas <- bas.lm(COST~RXPM+GS+RI+COPAY+AGE+F+MM, data=Data, prior="g-prior",alpha=n,
n.models=2^p, update=50, initprobs="Uniform")
library(BAS)
plot(Data_bas,which=4)
help("bas.lm")
image(Data_bas)
summary(Data_bas)
coef(Data_bas)
par(mfrow=c(3,3))
plot(coef(Data_bas), subset=2:8,ask=T)
library(BMA)
######## Performs Bayesian simultaneous variable selection and outlier identification
#library(BMA)
Data_bma <- MC3.REG(COST, as.matrix(Data[, -1]),num.its=10000,outliers=TRUE,
M0.out=rep(FALSE, 29), outs.list=1:29, M0.var=rep(TRUE,7))
View(Data)
######## Performs Bayesian simultaneous variable selection and outlier identification
#library(BMA)
Data_bma <- MC3.REG(COST, as.matrix(Data[, -1]),data=Data,num.its=10000,outliers=TRUE,
M0.out=rep(FALSE, 29), outs.list=1:29, M0.var=rep(TRUE,7))
######## Performs Bayesian simultaneous variable selection and outlier identification
#library(BMA)
Data_bma <- MC3.REG(COST, as.matrix(Data[, -1]),num.its=10000,outliers=TRUE,
M0.out=rep(FALSE, 29), outs.list=1:29, M0.var=rep(TRUE,7))
help(MC3.REG)
Data[,-1]
Data[,1]
######## Performs Bayesian simultaneous variable selection and outlier identification
#library(BMA)
Data_bma <- MC3.REG(Data[, 1], as.matrix(Data[, -1]),num.its=10000,outliers=TRUE,
M0.out=rep(FALSE, 29), outs.list=1:29, M0.var=rep(TRUE,7))
summary(Data_bma)
View(nu_n_sigma_n_sq)
help(qbeta)
qbeta(c(0.025,0.975),8,2)
qbeta(c(0.025,0.975),64,16)
qbeta(c(0.025,0.975),24,6)
qbeta(c(0.025,0.975),4,1)
qbeta(c(0.25,0.75),4,1)
qbeta(c(0.25,0.75),8,2)
help(qgamma)
qgamma(c(0.025,0.975),6,12)
library(MASS)
data(Boston)
View(Boston)
head(Boston)
library(bas)
library(BAS)
Data_bas <- bas.lm(medv~lstat+age+crim+rm+black, data=Boston, prior="g-prior",alpha=n,
n.models=2^p, update=50, initprobs="Uniform")
Data_bas <- bas.lm(medv~lstat+age+crim+rm+black, data=Boston, prior="g-prior",alpha=n,
n.models=2^5, update=50, initprobs="Uniform")
n = nrow(Boston)
Data_bas <- bas.lm(medv~lstat+age+crim+rm+black, data=Boston, prior="g-prior",alpha=n,
n.models=2^5, update=50, initprobs="Uniform")
plot(Data_bas,which=4)
summary(Data_bas)
coef(Data_bas)
qbeta(c(0.025,0.975),5,4)
5/9
qbeta(c(0.025,0.975),5,6)
8/14
###### Data
Data <- read.table("costs.txt",header=TRUE)[,-9]
library(mvtnorm)
###### g-Prior: with g=n using full model
#Data summaries
n <- nrow(Boston)
p <- 3
g <- n
X <- cbind(1,as.matrix(Boston[,c("lstat","age")]))
Y <- matrix(Boston$medv,ncol=1)
#Hyperparameters for the priors
beta_ols <- solve(t(X)%*%X)%*%t(X)%*%Y
SSR_beta_ols <- (t(Y - (X%*%(solve(t(X)%*%X))%*%t(X)%*%Y)))%*%(Y - (X%*%(solve(t(X)%*%X))%*%t(X)%*%Y))
sigma_ols <- SSR_beta_ols/(n-p)
#sigma_0_sq <- sigma_ols
sigma_0_sq <- 1
nu_0 <- 2
#set number of iterations
S <- 10000
#sample sigma_sq
nu_n <- nu_0 + n
Hg <- (g/(g+1))* X%*%solve(t(X)%*%X)%*%t(X)
SSRg <- t(Y)%*%(diag(1,nrow=n) - Hg)%*%Y
nu_n_sigma_n_sq <- nu_0*sigma_0_sq + SSRg
sigma_sq <- 1/rgamma(S,(nu_n/2),(nu_n_sigma_n_sq/2))
#sample beta
mu_n <- g*beta_ols/(g+1)
beta <- matrix(nrow=S,ncol=p)
for(s in 1:S){
Sigma_n <- g*sigma_sq[s]*solve(t(X)%*%X)/(g+1)
beta[s,] <- rmvnorm(1,mu_n,Sigma_n)
}
#posterior summaries
colnames(beta) <- colnames(X)
mean_beta <- apply(beta,2,mean)
round(mean_beta,4)
round(apply(beta,2,function(x) quantile(x,c(0.025,0.975))),4)
#############################################################
sigma = matrix(c(2,1.3,1.3,1),ncol=2)
View(sigma)
sig_0 = matrix(c(3,4.3,4.3,8),ncol=2)
t(t(sigma)+t(sig_0))
